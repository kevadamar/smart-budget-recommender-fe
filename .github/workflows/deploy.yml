name: Deploy to Private Server

on:
  push:
    branches:
      - deployment
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build production bundle
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create deployment package
        run: |
          tar -czf dist.tar.gz dist/
          echo "Build completed at $(date)" > build-info.txt

      - name: Deploy to Private Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "dist.tar.gz,build-info.txt"
          target: ${{ secrets.SERVER_DEPLOY_PATH }}/temp

      - name: Extract and restart on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd ${{ secrets.SERVER_DEPLOY_PATH }}

            # Backup current deployment
            if [ -d "dist" ]; then
              echo "Creating backup..."
              mv dist dist.backup.$(date +%Y%m%d_%H%M%S)
              # Keep only last 3 backups
              ls -dt dist.backup.* | tail -n +4 | xargs rm -rf
            fi

            # Extract new build
            echo "Extracting new build..."
            tar -xzf temp/dist.tar.gz

            # Cleanup
            rm -rf temp

            # Restart web server (adjust based on your setup)
            echo "Deployment completed successfully!"

            # Optional: Restart nginx/apache/pm2
            # sudo systemctl reload nginx
            # pm2 restart smart-budget-app

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
